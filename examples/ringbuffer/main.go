package main

import (
	"context"
	"errors"
	"flag"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"
	"unsafe"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"golang.org/x/sys/unix"
)

const defaultPollPeriod = 5 * time.Second

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -type event bpf ringbuffer.c -- -I../headers

func main() {
	// Name of the kernel function to trace.
	fn := "sys_execve"

	var pollEnable bool
	var pollPeriod time.Duration
	flag.BoolVar(&pollEnable, "poll", false, "If present, this will periodically poll with the -poll-period value.")
	flag.DurationVar(&pollPeriod, "poll-period", defaultPollPeriod, "The poll period duration, only available if the -poll flag is present.")
	flag.Parse()

	// Subscribe to signals for terminating the program.
	ctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM)
	defer cancel()

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	// Open a Kprobe at the entry point of the kernel function and attach the
	// pre-compiled program. Each time the kernel function enters, the program
	// will emit an event containing pid and command of the execved task.
	kp, err := link.Kprobe(fn, objs.KprobeExecve, nil)
	if err != nil {
		log.Fatalf("opening kprobe: %s", err)
	}
	defer kp.Close()

	callback := func(raw []byte, _ int) {
		// bpfEvent is generated by bpf2go.
		event := (*bpfEvent)(unsafe.Pointer(&raw[0]))
		log.Printf("pid: %d\tcomm: %s\n", event.Pid, unix.ByteSliceToString(event.Comm[:]))
	}

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.Events, ringbuf.WithCallback(callback))
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Call the poll function if the -poll flag is specified.
	if pollEnable {
		if err = poll(ctx, pollPeriod, rd); err != nil {
			os.Exit(1)
		}
		return
	}

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-ctx.Done()

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}
		callback(record.RawSample, record.Remaining)
	}
}

func poll(ctx context.Context, period time.Duration, reader *ringbuf.Reader) error {
	if period <= 0 {
		period = defaultPollPeriod
	}
	tick := time.NewTicker(period)
	for {
		select {
		case <-ctx.Done():
			log.Println("Received signal, exiting..")
			return nil
		case <-tick.C:
			_, err := reader.Poll(0)
			if err != nil {
				log.Printf("reading from reader: %s", err)
				return err
			}
			log.Printf("Waiting for %v before polling again...", period)
		}
	}
}
