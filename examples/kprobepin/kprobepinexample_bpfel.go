// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadKProbePinExample returns the embedded CollectionSpec for KProbePinExample.
func LoadKProbePinExample() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KProbePinExampleBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load KProbePinExample: %w", err)
	}

	return spec, err
}

// LoadKProbePinExampleObjects loads KProbePinExample and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *KProbePinExampleObjects
//     *KProbePinExamplePrograms
//     *KProbePinExampleMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKProbePinExampleObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadKProbePinExample()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// KProbePinExampleSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KProbePinExampleSpecs struct {
	KProbePinExampleProgramSpecs
	KProbePinExampleMapSpecs
}

// KProbePinExampleSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KProbePinExampleProgramSpecs struct {
	KprobeExecve *ebpf.ProgramSpec `ebpf:"kprobe_execve"`
}

// KProbePinExampleMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KProbePinExampleMapSpecs struct {
	KprobeMap *ebpf.MapSpec `ebpf:"kprobe_map"`
}

// KProbePinExampleObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKProbePinExampleObjects or ebpf.CollectionSpec.LoadAndAssign.
type KProbePinExampleObjects struct {
	KProbePinExamplePrograms
	KProbePinExampleMaps
}

func (o *KProbePinExampleObjects) Close() error {
	return _KProbePinExampleClose(
		&o.KProbePinExamplePrograms,
		&o.KProbePinExampleMaps,
	)
}

// KProbePinExampleMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKProbePinExampleObjects or ebpf.CollectionSpec.LoadAndAssign.
type KProbePinExampleMaps struct {
	KprobeMap *ebpf.Map `ebpf:"kprobe_map"`
}

func (m *KProbePinExampleMaps) Close() error {
	return _KProbePinExampleClose(
		m.KprobeMap,
	)
}

// KProbePinExamplePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKProbePinExampleObjects or ebpf.CollectionSpec.LoadAndAssign.
type KProbePinExamplePrograms struct {
	KprobeExecve *ebpf.Program `ebpf:"kprobe_execve"`
}

func (p *KProbePinExamplePrograms) Close() error {
	return _KProbePinExampleClose(
		p.KprobeExecve,
	)
}

func _KProbePinExampleClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed kprobepinexample_bpfel.o
var _KProbePinExampleBytes []byte
