package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"log"
	"net"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf/internal"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/perf"
	"github.com/cilium/ebpf/rlimit"
	"golang.org/x/sys/unix"
)

// $BPF_CLANG and $BPF_CFLAGS are set by the Makefile.
//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc $BPF_CLANG -cflags $BPF_CFLAGS -type event bpf solisten.c -- -I../headers -I../../btf/testdata
func main() {
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	link, err := link.AttachTracing(link.TracingOptions{
		Program: objs.bpfPrograms.InetListenFexit,
	})
	if err != nil {
		log.Fatal(err)
	}
	defer link.Close()

	// Open a perf event reader from userspace on the PERF_EVENT_ARRAY map
	// described in the eBPF C program.
	rd, err := perf.NewReader(objs.Events, os.Getpagesize())
	if err != nil {
		log.Fatalf("creating perf event reader: %s", err)
	}
	defer rd.Close()

	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Printf("%-9s %-16s %-3s %-7s %-5s %-5s %-32s\n",
		"PID", "COMM", "RET", "BACKLOG", "PROTO", "PORT", "ADDR",
	)

	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, perf.ErrClosed) {
				log.Println("received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the perf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), internal.NativeEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		handelEvent(event)
	}
}

func handelEvent(event bpfEvent) {
	family := uint16(event.Proto >> 16)
	Type := uint16(event.Proto)
	proto := ""

	if Type == syscall.SOCK_STREAM {
		proto += "TCP"
	} else if Type == syscall.SOCK_DGRAM {
		proto += "UDP"
	} else {
		proto += "UNK"
	}
	if family == syscall.AF_INET {
		proto += "v4"
	} else if family == syscall.AF_INET6 {
		proto += "v6"
	}

	log.Printf("%-9d %-16s %-3d %-7d %-5s %-5d %-32s",
		event.Pid,
		unix.ByteSliceToString(event.Comm[:]),
		event.Ret,
		event.Backlog,
		proto,
		event.Port,
		intArrayToIP(family, event.Addr),
	)
}

// intArrayToIP converts IPv4 or IPv6 number to string
func intArrayToIP(af uint16, addr [4]uint32) string {
	if af == syscall.AF_INET {
		return intSliceToIP(addr[:1])
	} else if af == syscall.AF_INET6 {
		return intSliceToIP(addr[:])
	} else {
		return ""
	}
}

func intSliceToIP(addr []uint32) string {
	ip := make(net.IP, 0, len(addr))
	for _, v := range addr {
		tmp := make(net.IP, 4)
		internal.NativeEndian.PutUint32(tmp, v)
		ip = append(ip, tmp...)
	}
	return ip.String()
}
